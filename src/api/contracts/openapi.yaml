
openapi: 3.0.0
info:
  title: Vehicle Rental Management API
  description: API for the vehicle rental management system
  version: 1.0.0
servers:
  - url: https://api.example.com/v1
    description: Production server
  - url: https://staging-api.example.com/v1
    description: Staging server
  - url: http://localhost:3000/api/v1
    description: Local development server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Customer:
      type: object
      properties:
        id:
          type: string
          format: uuid
        full_name:
          type: string
        phone_number:
          type: string
        email:
          type: string
          format: email
        address:
          type: string
        driver_license:
          type: string
        id_document_url:
          type: string
          nullable: true
        license_document_url:
          type: string
          nullable: true
        contract_document_url:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
        role:
          type: string
          enum: [customer, staff, admin]
      required:
        - id
        - full_name
        - role

    Vehicle:
      type: object
      properties:
        id:
          type: string
          format: uuid
        make:
          type: string
        model:
          type: string
        year:
          type: integer
        license_plate:
          type: string
        vin:
          type: string
        color:
          type: string
        status:
          type: string
          enum: [available, rented, maintenance, retired]
        mileage:
          type: number
        created_at:
          type: string
          format: date-time
      required:
        - id
        - make
        - model
        - license_plate
        - status

    Agreement:
      type: object
      properties:
        id:
          type: string
          format: uuid
        agreement_number:
          type: string
        customer_id:
          type: string
          format: uuid
        vehicle_id:
          type: string
          format: uuid
        start_date:
          type: string
          format: date-time
        end_date:
          type: string
          format: date-time
        status:
          type: string
          enum: [pending_payment, pending_deposit, active, closed]
        rent_amount:
          type: number
        total_amount:
          type: number
        created_at:
          type: string
          format: date-time
        customer:
          $ref: '#/components/schemas/CustomerSummary'
        vehicle:
          $ref: '#/components/schemas/VehicleSummary'
      required:
        - id
        - agreement_number
        - customer_id
        - vehicle_id
        - status

    CustomerSummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
        full_name:
          type: string
      required:
        - id
        - full_name

    VehicleSummary:
      type: object
      properties:
        id:
          type: string
          format: uuid
        make:
          type: string
        model:
          type: string
        license_plate:
          type: string
      required:
        - id
        - license_plate

    Payment:
      type: object
      properties:
        id:
          type: string
          format: uuid
        lease_id:
          type: string
          format: uuid
        amount:
          type: number
        amount_paid:
          type: number
        balance:
          type: number
        payment_date:
          type: string
          format: date-time
        payment_method:
          type: string
        status:
          type: string
          enum: [pending, completed, failed, refunded]
        description:
          type: string
        created_at:
          type: string
          format: date-time
      required:
        - id
        - lease_id
        - amount
        - status

    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: object
          properties:
            code:
              type: string
            message:
              type: string
            details:
              type: object
      required:
        - success
        - error

    PaginatedResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        data:
          type: object
          properties:
            items:
              type: array
              items:
                type: object
            pagination:
              type: object
              properties:
                currentPage:
                  type: integer
                totalPages:
                  type: integer
                totalItems:
                  type: integer
                hasNextPage:
                  type: boolean
                hasPreviousPage:
                  type: boolean
      required:
        - success
        - data

security:
  - bearerAuth: []

paths:
  /customers:
    get:
      summary: Get a list of customers
      tags: [Customers]
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 20
          description: Number of items per page
        - in: query
          name: searchQuery
          schema:
            type: string
          description: Search term for customer name, phone, email
        - in: query
          name: status
          schema:
            type: string
          description: Filter by customer status
      responses:
        '200':
          description: A list of customers
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          items:
                            type: array
                            items:
                              $ref: '#/components/schemas/Customer'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    post:
      summary: Create a new customer
      tags: [Customers]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                full_name:
                  type: string
                phone_number:
                  type: string
                email:
                  type: string
                address:
                  type: string
                driver_license:
                  type: string
              required:
                - full_name
                - phone_number
      responses:
        '201':
          description: Customer created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Customer'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /customers/{id}:
    get:
      summary: Get a customer by ID
      tags: [Customers]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Customer ID
      responses:
        '200':
          description: A customer
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Customer'
        '404':
          description: Customer not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    put:
      summary: Update a customer
      tags: [Customers]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Customer ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                full_name:
                  type: string
                phone_number:
                  type: string
                email:
                  type: string
                address:
                  type: string
                driver_license:
                  type: string
      responses:
        '200':
          description: Customer updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Customer'
        '404':
          description: Customer not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    delete:
      summary: Delete a customer
      tags: [Customers]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
          description: Customer ID
      responses:
        '200':
          description: Customer deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
        '404':
          description: Customer not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '400':
          description: Cannot delete customer with active agreements
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /vehicles:
    get:
      summary: Get a list of vehicles
      tags: [Vehicles]
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 20
          description: Number of items per page
        - in: query
          name: searchQuery
          schema:
            type: string
          description: Search term for vehicle details
        - in: query
          name: status
          schema:
            type: string
          description: Filter by vehicle status
        - in: query
          name: make
          schema:
            type: string
          description: Filter by vehicle make
        - in: query
          name: model
          schema:
            type: string
          description: Filter by vehicle model
      responses:
        '200':
          description: A list of vehicles
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          items:
                            type: array
                            items:
                              $ref: '#/components/schemas/Vehicle'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    post:
      summary: Create a new vehicle
      tags: [Vehicles]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                make:
                  type: string
                model:
                  type: string
                year:
                  type: integer
                license_plate:
                  type: string
                vin:
                  type: string
                color:
                  type: string
                status:
                  type: string
                  enum: [available, maintenance, retired]
                mileage:
                  type: number
              required:
                - make
                - model
                - license_plate
      responses:
        '201':
          description: Vehicle created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Vehicle'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /agreements:
    get:
      summary: Get a list of agreements
      tags: [Agreements]
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 20
          description: Number of items per page
        - in: query
          name: searchQuery
          schema:
            type: string
          description: Search term for agreements
        - in: query
          name: status
          schema:
            type: string
          description: Filter by agreement status
        - in: query
          name: customerId
          schema:
            type: string
            format: uuid
          description: Filter by customer ID
        - in: query
          name: vehicleId
          schema:
            type: string
            format: uuid
          description: Filter by vehicle ID
      responses:
        '200':
          description: A list of agreements
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          items:
                            type: array
                            items:
                              $ref: '#/components/schemas/Agreement'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /payments:
    get:
      summary: Get a list of payments
      tags: [Payments]
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number
        - in: query
          name: pageSize
          schema:
            type: integer
            default: 20
          description: Number of items per page
        - in: query
          name: agreementId
          schema:
            type: string
            format: uuid
          description: Filter by agreement ID
        - in: query
          name: startDate
          schema:
            type: string
            format: date
          description: Filter by payment date (from)
        - in: query
          name: endDate
          schema:
            type: string
            format: date
          description: Filter by payment date (to)
        - in: query
          name: status
          schema:
            type: string
          description: Filter by payment status
      responses:
        '200':
          description: A list of payments
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/PaginatedResponse'
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          items:
                            type: array
                            items:
                              $ref: '#/components/schemas/Payment'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    
    post:
      summary: Create a new payment
      tags: [Payments]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                lease_id:
                  type: string
                  format: uuid
                amount:
                  type: number
                payment_method:
                  type: string
                payment_date:
                  type: string
                  format: date-time
                description:
                  type: string
              required:
                - lease_id
                - amount
                - payment_method
                - payment_date
      responses:
        '201':
          description: Payment created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Payment'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
